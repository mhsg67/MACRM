scala(1)                                   USER COMMANDS                                  scala(1)



NNAAMMEE
       ssccaallaa - Run code in the Scala 2 language

SSYYNNOOPPSSIISS
       ssccaallaa  [ <_o_p_t_i_o_n> ]... [ <_t_o_r_u_n> <_a_r_g_u_m_e_n_t>... ]

PPAARRAAMMEETTEERRSS
       <_c_o_m_p_i_l_e_r_-_o_p_t_i_o_n>
              Any scalac option.  See ssccaallaacc(1).

       --hhoowwttoorruunn::<_h_o_w>
              How to execute <_t_o_r_u_n>, if it is present. Options for <_h_o_w> are guess (the default),
              script, jar, and object.

       --ii <_f_i_l_e>
              Requests that a file be pre-loaded.  It is only meaningful for interactive shells.

       --ee <_s_t_r_i_n_g>
              Requests that its argument be executed as Scala code.

       --ssaavveeccoommppiilleedd
              Save this compiled version of scripts in order to speed up later executions  of  the
              same  script.   When  running a script, save the compiled version in a file with the
              same name as the script but with an extension of .jar.  On subsequent  runs  of  the
              same  script, the pre-compiled .jar file will be used if it is newer than the script
              file.

       --nnooccoommppddaaeemmoonn
              Do not use the ffsscc offline compiler.

       --DDproperty=value
              Set a Java system property.  If no value is specified, then the property is  set  to
              the empty string.

       <_t_o_r_u_n>
              A top-level object or a script file to run.

       <_a_r_g_u_m_e_n_t>
              An arguments to pass to <_t_o_r_u_n>.

DDEESSCCRRIIPPTTIIOONN
       The  ssccaallaa utility runs Scala code using a Java runtime environment.  The Scala code to run
       is specified in one of three ways:

          1.  With no arguments specified, a Scala shell starts and reads commands interactively.

          2.  With -howtorun:object specified, the fully  qualified  name  of  a  top-level  Scala
              object  may  be  specified.   The  object should previously have been compiled using
              ssccaallaacc(1).

          3.  With -howtorun:script specified, a file containing Scala code may be specified.

       If -howtorun: is left as the default (guess), then the ssccaallaa command will check  whether  a
       file  of the specified name exists.  If it does, then it will treat it as a script file; if
       it does not, then it will treat it as the name of an object.

       In all three cases, arbitrary scalac options may be specified. The most common option is to
       specify a classpath with -classpath, but see the ssccaallaacc(1) page for full details.

       If  an  object  is specified to run, then that object must be a top-level Scala object with
       the specified name.  The object must define a method mmaaiinn with the following signature:

       ddeeff main(args: Array[String]): Unit

       The method must return a UUnniitt value, and it must accept a SSttrriinngg array as a parameter.  All
       arguments specified on the command line will be passed as arguments to the mmaaiinn method.

       If  a  script  file is specified to run, then the file is read and all Scala statements and
       declarations in the file are processed in order. Any arguments specified will be  available
       via the argsvariable.

       Script files may have an optional header that is ignored if present.  There are two ways to
       format the header: either beginning with #! and ending with !#, or beginning with ::#!  and
       ending with ::!#.

       Such a header must have each header boundary start at the beginning of a line.  Headers can
       be used to make stand-alone script files, as shown in the examples below.

       If scala is run from an sbaz(1) directory, then it will  add  to  its  classpath  any  jars
       installed  in  the  lib  directory  of  the sbaz directory.  Additionally, if no -classpath
       option is specified, then scala will add ".", the current directory,  to  the  end  of  the
       classpath.

OOPPTTIIOONNSS
       If  any  compiler options are specified, they must be first in the command line and must be
       followed by a bare hypen ("-") character. If no arguments are specified after the  optional
       compiler arguments, then an interactive Scala shell is started.  Otherwise, either a script
       file is run, or a pre-compiled Scala object is run.  It is possible to distinguish the last
       two  cases  by using an explicit -object or -script flag, but usually the program can guess
       correctly.

EENNVVIIRROONNMMEENNTT
       JJAAVVAACCMMDD
              Specify the jjaavvaa command to be used for running the Scala code.   Arguments  may  be
              specified  as  part of the environment variable; spaces, quotation marks, etc., will
              be passed directly to the shell for expansion.

       JJAAVVAA__HHOOMMEE
              Specify JDK/JRE home directory. This directory is used to locate  the  jjaavvaa  command
              unless JJAAVVAACCMMDD variable set.

       JJAAVVAA__OOPPTTSS
              Specify the options to be passed to the jjaavvaa command defined by JJAAVVAACCMMDD.

              With  Java  1.5 (or newer) one may for example configure the memory usage of the JVM
              as follows: JAVA_OPTS="-Xmx512M -Xms16M -Xss16M"

              With  GNU  Java  one  may  configure  the  memory  usage  of  the  GIJ  as  follows:
              JAVA_OPTS="--mx512m --ms16m"

EEXXAAMMPPLLEESS
       Here are some examples of running Scala code:

       Execute a Scala program generated in the current directory
              ssccaallaa hello.HelloWorld

       Execute a Scala program generated in a user-defined directory ccllaasssseess
              ssccaallaa --ccllaassssppaatthh classes hello.HelloWorld

       Execute a Scala program using a user-defined jjaavvaa command
              eennvv JJAAVVAACCMMDD=/usr/local/bin/cacao ssccaallaa --ccllaassssppaatthh classes hello.HelloWorld

       Execute a Scala program using JVM options
              eennvv  JJAAVVAACCMMDD=java JJAAVVAA__OOPPTTSS="-Dmsg=hello -enableassertions" ssccaallaa --ccllaassssppaatthh classes
              hello.HelloWorld

       Here is a complete Scala script for Unix:

       #!/bin/sh
       exec scala "$0" "$@"
       !#
       Console.println("Hello, world!")
       args.toList foreach Console.println

       Here is a complete Scala script for MS Windows:

       ::#!
       @echo off
       call scala %0 %*
       goto :eof
       ::!#
       Console.println("Hello, world!")
       args.toList foreach Console.println

       If you want to use the compilation cache to speed up multiple  executions  of  the  script,
       then add -savecompiled to the scala command:

       #!/bin/sh
       exec scala -savecompiled "$0" "$@"
       !#
       Console.println("Hello, world!")
       args.toList foreach Console.println

EEXXIITT SSTTAATTUUSS
       The  ssccaallaa  command returns a zero exit status if it succeeds. Non zero is returned in case
       of any error.  If a script or top-level object is executed and returns a value,  then  that
       return value is passed on to ssccaallaa.

AAUUTTHHOORR
       Written by Martin Odersky and other members of the Scala team.

RREEPPOORRTTIINNGG BBUUGGSS
       Report bugs to https://issues.scala-lang.org/.

CCOOPPYYRRIIGGHHTT
       This  is  open-source software, available to you under a BSD-like license. See accomponying
       "copyright" or "LICENSE" file for copying conditions. There is NO warranty;  not  even  for
       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

SSEEEE AALLSSOO
       ffsscc(1), ssccaallaacc(1), ssccaallaaddoocc(1), ssccaallaapp(1)



version 0.5                                 April 2007                                    scala(1)
